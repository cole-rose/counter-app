{"version":3,"sources":["components/navbar.jsx","components/counter.jsx","components/counters.jsx","App.js","serviceWorker.js","index.js"],"names":["NavBar","totalCounters","console","log","className","href","Counter","prevProps","prevState","this","getBadgeClasses","formatCount","onClick","props","onIncrement","counter","onDelete","id","classes","value","React","Component","Counters","onReset","counters","map","key","App","state","handleDelete","counterId","filter","c","setState","handleReset","handleIncrement","index","indexOf","Fragment","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.eaacda23.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\n//stateless functional component\nfunction NavBar({ totalCounters }) {\n  console.log(\"NavBar - Rendered\");\n\n  return (\n    <nav className=\"navbar navbar-light bg-light\">\n      <a className=\"navbar-brand\" href=\"#\">\n        Shopping Cart{\" \"}\n        <span className=\"badge badge-pill badge-secondary\">\n          {totalCounters}\n        </span>\n      </a>\n    </nav>\n  );\n}\n\nexport default NavBar;\n","import React, { Component } from \"react\";\n\nclass Counter extends React.Component {\n  componentDidUpdate(prevProps, prevState) {\n    console.log(\"prevProps\", prevProps);\n    console.log(\"prevState\", prevState);\n  }\n\n  componentWillUnmount() {\n    //Allows cleanup of any listeners, etc to prevent memory leaks\n    console.log(\"Counter - Unmount\");\n  }\n\n  render() {\n    console.log(\"Counter - Rendered\");\n    return (\n      <div>\n        <span className={this.getBadgeClasses()}>{this.formatCount()} </span>\n        <button\n          onClick={() => this.props.onIncrement(this.props.counter)}\n          className=\"btn btn-secondary btn-sm\"\n        >\n          {\" \"}\n          Increment{\" \"}\n        </button>\n        <button\n          onClick={() => this.props.onDelete(this.props.counter.id)}\n          className=\"btn btn-danger btn-sm m-2\"\n        >\n          Delete\n        </button>\n      </div>\n    );\n  }\n  getBadgeClasses() {\n    let classes = \"badge m-2 badge-\";\n    classes += this.props.counter.value === 0 ? \"warning\" : \"primary\";\n    return classes;\n  }\n\n  formatCount() {\n    const { value } = this.props.counter;\n    return value === 0 ? \"Zero\" : value;\n  }\n}\n\nexport default Counter;\n","import React, { Component } from \"react\";\nimport Counter from \"./counter\";\n\nclass Counters extends Component {\n  render() {\n    console.log(\"Counters - Rendered\");\n    const { onReset, onDelete, onIncrement } = this.props;\n    return (\n      <div>\n        <button onClick={this.props.onReset} className=\"btn-primary btn-sm m-2\">\n          Reset\n        </button>\n        {this.props.counters.map((counter) => (\n          <Counter\n            key={counter.id}\n            counter={counter}\n            onDelete={onDelete}\n            onIncrement={onIncrement}\n          />\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default Counters;\n","import React from \"react\";\nimport NavBar from \"./components/navbar\";\nimport Counters from \"./components/counters\";\nimport \"./App.css\";\nclass App extends React.Component {\n  state = {\n    counters: [\n      { id: 1, value: 0 },\n      { id: 2, value: 0 },\n      { id: 3, value: 0 },\n      { id: 4, value: 0 },\n    ],\n  };\n\n  constructor() {\n    super();\n    console.log(\"App - Constructor\");\n  }\n\n  componentDidMount() {\n    //Ajax Call\n    console.log(\"App - Mounted\");\n  }\n\n  handleDelete = (counterId) => {\n    const counters = this.state.counters.filter((c) => c.id !== counterId);\n    this.setState({ counters });\n  };\n\n  handleReset = () => {\n    const counters = this.state.counters.map((c) => {\n      c.value = 0;\n      return c;\n    });\n    this.setState({ counters });\n  };\n\n  handleIncrement = (counter) => {\n    const counters = [...this.state.counters];\n    const index = counters.indexOf(counter);\n    counters[index] = { ...counter };\n    counters[index].value += 1;\n    this.setState({ counters });\n  };\n\n  render() {\n    console.log(\"App - Rendered\");\n    return (\n      <React.Fragment>\n        <NavBar\n          totalCounters={this.state.counters.filter((c) => c.value > 0).length}\n        />\n        <main className=\"container\">\n          {\" \"}\n          <Counters\n            onReset={this.handleReset}\n            onIncrement={this.handleIncrement}\n            onDelete={this.handleDelete}\n            counters={this.state.counters}\n          />\n        </main>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}